{"ast":null,"code":"import { call, delay, fork, put, select, take, takeLatest } from \"redux-saga/effects\";\nimport * as taskType from \"../constants/tasks\";\nimport { getListTask, addTaks } from \"../apis/tasks\";\nimport { fetchTasksFailed, fetchTasksSuccess, fetchFilterSuccess, addTasksSuccess, addTasksFailed, fetchTasks } from \"../actions/tasks\";\nimport { hideLoading, showLoading } from \"../actions/ui\";\nimport { hideModal } from \"../actions/modalGlobal\";\nimport { STATUS } from \"../constants/index\";\n\nfunction* watchFetchTasks() {\n  try {\n    yield put(showLoading());\n    const result = yield put(fetchTasks);\n    console.log(result.payload); // const res = yield call(getListTask);\n    // const { data } = res;\n    // yield put(fetchTasksSuccess(data));\n\n    yield delay(1000);\n    yield put(hideLoading());\n  } catch (e) {\n    console.log(e);\n    yield put(fetchTasksFailed(e));\n  }\n}\n\nfunction* fetchFilter({\n  payload\n}) {\n  yield delay(500);\n  const action = yield put(); //yield put(fetchFilterSuccess(listTaskFiltered));\n}\n\nfunction* addTask({\n  payload\n}) {\n  try {\n    yield put(showLoading());\n    const {\n      title,\n      description\n    } = payload.data;\n    const res = yield call(addTaks, {\n      title,\n      description,\n      status: STATUS[0].value\n    });\n    yield put(addTasksSuccess(res.data));\n    yield put(hideModal());\n    yield delay(1000);\n    yield put(hideLoading());\n  } catch (error) {\n    console.log(error);\n    yield put(addTasksFailed(error));\n  }\n}\n\nfunction* rootSaga() {\n  yield takeLatest(taskType.FETCH_TASK, watchFetchTasks);\n  yield takeLatest(taskType.FETCH_FILTER, fetchFilter);\n  yield takeLatest(taskType.ADD_TASK, addTask);\n}\n\nexport default rootSaga;","map":{"version":3,"sources":["/Users/minhtien/Documents/react/project-saga/src/saga/index.js"],"names":["call","delay","fork","put","select","take","takeLatest","taskType","getListTask","addTaks","fetchTasksFailed","fetchTasksSuccess","fetchFilterSuccess","addTasksSuccess","addTasksFailed","fetchTasks","hideLoading","showLoading","hideModal","STATUS","watchFetchTasks","result","console","log","payload","e","fetchFilter","action","addTask","title","description","data","res","status","value","error","rootSaga","FETCH_TASK","FETCH_FILTER","ADD_TASK"],"mappings":"AAAA,SACEA,IADF,EAEEC,KAFF,EAGEC,IAHF,EAIEC,GAJF,EAKEC,MALF,EAMEC,IANF,EAOEC,UAPF,QAQO,oBARP;AASA,OAAO,KAAKC,QAAZ,MAA0B,oBAA1B;AACA,SAASC,WAAT,EAAsBC,OAAtB,QAAqC,eAArC;AACA,SACEC,gBADF,EAEEC,iBAFF,EAGEC,kBAHF,EAIEC,eAJF,EAKEC,cALF,EAMEC,UANF,QAOO,kBAPP;AAQA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,eAAzC;AACA,SAASC,SAAT,QAA0B,wBAA1B;AAEA,SAASC,MAAT,QAAuB,oBAAvB;;AAEA,UAAUC,eAAV,GAA4B;AACxB,MAAI;AACF,UAAMjB,GAAG,CAACc,WAAW,EAAZ,CAAT;AACA,UAAMI,MAAM,GAAG,MAAMlB,GAAG,CAACY,UAAD,CAAxB;AACAO,IAAAA,OAAO,CAACC,GAAR,CAAYF,MAAM,CAACG,OAAnB,EAHE,CAIF;AACA;AACA;;AACA,UAAMvB,KAAK,CAAC,IAAD,CAAX;AACA,UAAME,GAAG,CAACa,WAAW,EAAZ,CAAT;AACD,GATD,CASE,OAAOS,CAAP,EAAU;AACVH,IAAAA,OAAO,CAACC,GAAR,CAAYE,CAAZ;AACA,UAAMtB,GAAG,CAACO,gBAAgB,CAACe,CAAD,CAAjB,CAAT;AACD;AACJ;;AAED,UAAUC,WAAV,CAAsB;AAAEF,EAAAA;AAAF,CAAtB,EAAmC;AACjC,QAAMvB,KAAK,CAAC,GAAD,CAAX;AACA,QAAM0B,MAAM,GAAG,MAAMxB,GAAG,EAAxB,CAFiC,CAGjC;AACD;;AAED,UAAUyB,OAAV,CAAkB;AAAEJ,EAAAA;AAAF,CAAlB,EAA+B;AAC7B,MAAI;AACF,UAAMrB,GAAG,CAACc,WAAW,EAAZ,CAAT;AACA,UAAM;AAAEY,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAyBN,OAAO,CAACO,IAAvC;AACA,UAAMC,GAAG,GAAG,MAAMhC,IAAI,CAACS,OAAD,EAAU;AAC9BoB,MAAAA,KAD8B;AAE9BC,MAAAA,WAF8B;AAG9BG,MAAAA,MAAM,EAAEd,MAAM,CAAC,CAAD,CAAN,CAAUe;AAHY,KAAV,CAAtB;AAKA,UAAM/B,GAAG,CAACU,eAAe,CAACmB,GAAG,CAACD,IAAL,CAAhB,CAAT;AACA,UAAM5B,GAAG,CAACe,SAAS,EAAV,CAAT;AACA,UAAMjB,KAAK,CAAC,IAAD,CAAX;AACA,UAAME,GAAG,CAACa,WAAW,EAAZ,CAAT;AAED,GAbD,CAaE,OAAOmB,KAAP,EAAc;AACdb,IAAAA,OAAO,CAACC,GAAR,CAAYY,KAAZ;AACA,UAAMhC,GAAG,CAACW,cAAc,CAACqB,KAAD,CAAf,CAAT;AACD;AACF;;AAED,UAAUC,QAAV,GAAqB;AACnB,QAAM9B,UAAU,CAACC,QAAQ,CAAC8B,UAAV,EAAqBjB,eAArB,CAAhB;AACA,QAAMd,UAAU,CAACC,QAAQ,CAAC+B,YAAV,EAAwBZ,WAAxB,CAAhB;AACA,QAAMpB,UAAU,CAACC,QAAQ,CAACgC,QAAV,EAAoBX,OAApB,CAAhB;AACD;;AAED,eAAeQ,QAAf","sourcesContent":["import {\n  call,\n  delay,\n  fork,\n  put,\n  select,\n  take,\n  takeLatest,\n} from \"redux-saga/effects\";\nimport * as taskType from \"../constants/tasks\";\nimport { getListTask, addTaks } from \"../apis/tasks\";\nimport {\n  fetchTasksFailed,\n  fetchTasksSuccess,\n  fetchFilterSuccess,\n  addTasksSuccess,\n  addTasksFailed,\n  fetchTasks\n} from \"../actions/tasks\";\nimport { hideLoading, showLoading } from \"../actions/ui\";\nimport { hideModal } from \"../actions/modalGlobal\";\n\nimport { STATUS } from \"../constants/index\";\n\nfunction* watchFetchTasks() {\n    try {\n      yield put(showLoading());\n      const result = yield put(fetchTasks);\n      console.log(result.payload);\n      // const res = yield call(getListTask);\n      // const { data } = res;\n      // yield put(fetchTasksSuccess(data));\n      yield delay(1000);\n      yield put(hideLoading());\n    } catch (e) {\n      console.log(e);\n      yield put(fetchTasksFailed(e));\n    }\n}\n\nfunction* fetchFilter({ payload }) {\n  yield delay(500);\n  const action = yield put()\n  //yield put(fetchFilterSuccess(listTaskFiltered));\n}\n\nfunction* addTask({ payload }) {\n  try {\n    yield put(showLoading());\n    const { title, description } = payload.data;\n    const res = yield call(addTaks, {\n      title,\n      description,\n      status: STATUS[0].value,\n    });\n    yield put(addTasksSuccess(res.data));\n    yield put(hideModal());\n    yield delay(1000);\n    yield put(hideLoading());\n\n  } catch (error) {\n    console.log(error);\n    yield put(addTasksFailed(error));\n  }\n}\n\nfunction* rootSaga() {\n  yield takeLatest(taskType.FETCH_TASK,watchFetchTasks);\n  yield takeLatest(taskType.FETCH_FILTER, fetchFilter);\n  yield takeLatest(taskType.ADD_TASK, addTask);\n}\n\nexport default rootSaga;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { call, fork, put, take } from \"redux-saga/effects\";\nimport * as taskType from \"../constants/tasks\";\nimport { fectchTasks } from \"../apis/tasks\";\nimport { fetchTasksFailed, fetchTasksSuccess } from \"../actions/tasks\";\n\nfunction* watchFetchTasks() {\n  while (true) {\n    yield take(taskType.FETCH_TASK);\n\n    try {\n      const res = yield call(fectchTasks);\n      const {\n        data\n      } = res;\n      console.log(res);\n      yield put(fetchTasksSuccess(data));\n    } catch (e) {\n      yield put(fetchTasksFailed(e));\n    }\n  }\n}\n\nfunction* test1() {\n  console.log(\"test 1\");\n  yield true;\n}\n\nfunction* rootSaga() {\n  yield fork(watchFetchTasks);\n  yield fork(test1);\n}\n\nexport default rootSaga;","map":{"version":3,"sources":["/Users/minhtien/Documents/react/project-saga/src/saga/index.js"],"names":["call","fork","put","take","taskType","fectchTasks","fetchTasksFailed","fetchTasksSuccess","watchFetchTasks","FETCH_TASK","res","data","console","log","e","test1","rootSaga"],"mappings":"AAAA,SAASA,IAAT,EAAeC,IAAf,EAAqBC,GAArB,EAA0BC,IAA1B,QAAsC,oBAAtC;AACA,OAAO,KAAKC,QAAZ,MAA0B,oBAA1B;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,SAASC,gBAAT,EAA2BC,iBAA3B,QAAoD,kBAApD;;AAEA,UAAUC,eAAV,GAA4B;AAC1B,SAAO,IAAP,EAAa;AACX,UAAML,IAAI,CAACC,QAAQ,CAACK,UAAV,CAAV;;AACA,QAAI;AACF,YAAMC,GAAG,GAAG,MAAMV,IAAI,CAACK,WAAD,CAAtB;AACA,YAAM;AAAEM,QAAAA;AAAF,UAAWD,GAAjB;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ;AACA,YAAMR,GAAG,CAACK,iBAAiB,CAACI,IAAD,CAAlB,CAAT;AACD,KALD,CAKE,OAAOG,CAAP,EAAU;AACV,YAAMZ,GAAG,CAACI,gBAAgB,CAACQ,CAAD,CAAjB,CAAT;AACD;AACF;AACF;;AAED,UAAUC,KAAV,GAAkB;AAChBH,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACA,QAAM,IAAN;AACD;;AAED,UAAUG,QAAV,GAAqB;AACnB,QAAMf,IAAI,CAACO,eAAD,CAAV;AACA,QAAMP,IAAI,CAACc,KAAD,CAAV;AACD;;AAED,eAAeC,QAAf","sourcesContent":["import { call, fork, put, take } from \"redux-saga/effects\";\nimport * as taskType from \"../constants/tasks\";\nimport { fectchTasks } from \"../apis/tasks\";\nimport { fetchTasksFailed, fetchTasksSuccess } from \"../actions/tasks\";\n\nfunction* watchFetchTasks() {\n  while (true) {\n    yield take(taskType.FETCH_TASK);\n    try {\n      const res = yield call(fectchTasks);\n      const { data } = res;\n      console.log(res);\n      yield put(fetchTasksSuccess(data));\n    } catch (e) {\n      yield put(fetchTasksFailed(e));\n    }\n  }\n}\n\nfunction* test1() {\n  console.log(\"test 1\");\n  yield true;\n}\n\nfunction* rootSaga() {\n  yield fork(watchFetchTasks);\n  yield fork(test1);\n}\n\nexport default rootSaga;\n"]},"metadata":{},"sourceType":"module"}
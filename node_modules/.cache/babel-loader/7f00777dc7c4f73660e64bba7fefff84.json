{"ast":null,"code":"import { call, delay, fork, put, select, take, takeLatest } from \"redux-saga/effects\";\nimport * as taskType from \"../constants/tasks\";\nimport { fectchTasks, addTaks } from \"../apis/tasks\";\nimport { fetchTasksFailed, fetchTasksSuccess, fetchFilterSuccess, addTasksSuccess, addTasksFailed } from \"../actions/tasks\";\nimport { hideLoading, showLoading } from \"../actions/ui\";\nimport { hideModal } from \"../actions/modalGlobal\";\nimport { STATUS } from \"../constants/index\";\n\nfunction* watchFetchTasks() {\n  while (true) {\n    try {\n      yield take(taskType.FETCH_TASK);\n      yield put(showLoading());\n      const res = yield call(fectchTasks);\n      const {\n        data\n      } = res;\n      yield put(fetchTasksSuccess(data));\n      yield delay(1000);\n      yield put(hideLoading());\n    } catch (e) {\n      console.log(e);\n      yield put(fetchTasksFailed(e));\n    }\n  }\n}\n\nfunction* fetchFilter({\n  payload\n}) {\n  yield delay(500);\n  const {\n    keyword\n  } = payload;\n  const list = yield select(state => state.tasks.listTasks);\n  const listTaskFiltered = list.filter(task => task.title.trim().toLowerCase().includes(keyword.trim().toLowerCase()));\n  console.log(listTaskFiltered);\n  yield put(fetchFilterSuccess(listTaskFiltered));\n}\n\nfunction* addTask({\n  payload\n}) {\n  try {\n    yield put(showLoading());\n    const {\n      title,\n      description\n    } = payload.data;\n    const res = yield call(addTaks, {\n      title,\n      description,\n      status: STATUS[0].value\n    });\n    yield put(addTasksSuccess(res.data));\n    yield delay(1000);\n    yield put(hideLoading());\n    yield put(hideModal());\n  } catch (error) {\n    console.log(error);\n    yield put(addTasksFailed(error));\n  }\n}\n\nfunction* rootSaga() {\n  yield fork(watchFetchTasks);\n  yield takeLatest(taskType.FETCH_FILTER, fetchFilter);\n  yield takeLatest(taskType.ADD_TASK, addTask);\n}\n\nexport default rootSaga;","map":{"version":3,"sources":["/Users/minhtien/Documents/react/project-saga/src/saga/index.js"],"names":["call","delay","fork","put","select","take","takeLatest","taskType","fectchTasks","addTaks","fetchTasksFailed","fetchTasksSuccess","fetchFilterSuccess","addTasksSuccess","addTasksFailed","hideLoading","showLoading","hideModal","STATUS","watchFetchTasks","FETCH_TASK","res","data","e","console","log","fetchFilter","payload","keyword","list","state","tasks","listTasks","listTaskFiltered","filter","task","title","trim","toLowerCase","includes","addTask","description","status","value","error","rootSaga","FETCH_FILTER","ADD_TASK"],"mappings":"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","sourcesContent":["import {\n  call,\n  delay,\n  fork,\n  put,\n  select,\n  take,\n  takeLatest,\n} from \"redux-saga/effects\";\nimport * as taskType from \"../constants/tasks\";\nimport { fectchTasks, addTaks } from \"../apis/tasks\";\nimport {\n  fetchTasksFailed,\n  fetchTasksSuccess,\n  fetchFilterSuccess,\n  addTasksSuccess,\n  addTasksFailed,\n} from \"../actions/tasks\";\nimport { hideLoading, showLoading } from \"../actions/ui\";\nimport { hideModal } from \"../actions/modalGlobal\";\n\nimport { STATUS } from \"../constants/index\";\nfunction* watchFetchTasks() {\n  while (true) {\n    try {\n      yield take(taskType.FETCH_TASK);\n      yield put(showLoading());\n      const res = yield call(fectchTasks);\n      const { data } = res;\n      yield put(fetchTasksSuccess(data));\n      yield delay(1000);\n      yield put(hideLoading());\n    } catch (e) {\n      console.log(e);\n      yield put(fetchTasksFailed(e));\n    }\n  }\n}\n\nfunction* fetchFilter({ payload }) {\n  yield delay(500);\n  const { keyword } = payload;\n  const list = yield select((state) => state.tasks.listTasks);\n  const listTaskFiltered = list.filter((task) =>\n    task.title.trim().toLowerCase().includes(keyword.trim().toLowerCase())\n  );\n  console.log(listTaskFiltered);\n  yield put(fetchFilterSuccess(listTaskFiltered));\n}\n\nfunction* addTask({ payload }) {\n  try {\n    yield put(showLoading());\n    const { title, description } = payload.data;\n    const res = yield call(addTaks, {\n      title,\n      description,\n      status: STATUS[0].value,\n    });\n    yield put(addTasksSuccess(res.data));\n    yield delay(1000);\n    yield put(hideLoading());\n    yield put(hideModal());\n  } catch (error) {\n    console.log(error);\n    yield put(addTasksFailed(error));\n  }\n}\n\nfunction* rootSaga() {\n  yield fork(watchFetchTasks);\n  yield takeLatest(taskType.FETCH_FILTER, fetchFilter);\n  yield takeLatest(taskType.ADD_TASK, addTask);\n}\n\nexport default rootSaga;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { call, delay, fork, put, select, take, takeLatest } from \"redux-saga/effects\";\nimport * as taskType from \"../constants/tasks\";\nimport { getListTask, addTaks } from \"../apis/tasks\";\nimport { fetchTasksFailed, fetchTasksSuccess, fetchFilterSuccess, addTasksSuccess, addTasksFailed, fetchTasks } from \"../actions/tasks\";\nimport { hideLoading, showLoading } from \"../actions/ui\";\nimport { hideModal } from \"../actions/modalGlobal\";\nimport { STATUS } from \"../constants/index\";\n\nfunction* watchFetchTasks({\n  payload\n}) {\n  try {\n    yield put(showLoading());\n    console.log(payload.param);\n    const {\n      keyword\n    } = payload; // const res = yield call(getListTask({\n    //   g : keyword\n    // }));\n    // const { data } = res;\n    // yield put(fetchTasksSuccess(data));\n\n    yield delay(1000);\n    yield put(hideLoading());\n  } catch (e) {\n    console.log(e);\n    yield put(fetchTasksFailed(e));\n  }\n}\n\nfunction* fetchFilter({\n  payload\n}) {\n  yield delay(500);\n  const {\n    keyword\n  } = payload.data;\n  console.log(payload);\n  yield put(fetchTasks({\n    g: keyword\n  })); //const action = yield put()\n  //yield put(fetchFilterSuccess(listTaskFiltered));\n}\n\nfunction* addTask({\n  payload\n}) {\n  try {\n    yield put(showLoading());\n    const {\n      title,\n      description\n    } = payload.data;\n    const res = yield call(addTaks, {\n      title,\n      description,\n      status: STATUS[0].value\n    });\n    yield put(addTasksSuccess(res.data));\n    yield put(hideModal());\n    yield delay(1000);\n    yield put(hideLoading());\n  } catch (error) {\n    console.log(error);\n    yield put(addTasksFailed(error));\n  }\n}\n\nfunction* rootSaga() {\n  yield takeLatest(taskType.FETCH_TASK, watchFetchTasks); //yield takeLatest(taskType.FETCH_FILTER, fetchFilter);\n  //yield takeLatest(taskType.ADD_TASK, addTask);\n}\n\nexport default rootSaga;","map":{"version":3,"sources":["/Users/minhtien/Documents/react/project-saga/src/saga/index.js"],"names":["call","delay","fork","put","select","take","takeLatest","taskType","getListTask","addTaks","fetchTasksFailed","fetchTasksSuccess","fetchFilterSuccess","addTasksSuccess","addTasksFailed","fetchTasks","hideLoading","showLoading","hideModal","STATUS","watchFetchTasks","payload","console","log","param","keyword","e","fetchFilter","data","g","addTask","title","description","res","status","value","error","rootSaga","FETCH_TASK"],"mappings":"AAAA,SACEA,IADF,EAEEC,KAFF,EAGEC,IAHF,EAIEC,GAJF,EAKEC,MALF,EAMEC,IANF,EAOEC,UAPF,QAQO,oBARP;AASA,OAAO,KAAKC,QAAZ,MAA0B,oBAA1B;AACA,SAASC,WAAT,EAAsBC,OAAtB,QAAqC,eAArC;AACA,SACEC,gBADF,EAEEC,iBAFF,EAGEC,kBAHF,EAIEC,eAJF,EAKEC,cALF,EAMEC,UANF,QAOO,kBAPP;AAQA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,eAAzC;AACA,SAASC,SAAT,QAA0B,wBAA1B;AAEA,SAASC,MAAT,QAAuB,oBAAvB;;AAEA,UAAUC,eAAV,CAA0B;AAAEC,EAAAA;AAAF,CAA1B,EAAuC;AACnC,MAAI;AACF,UAAMlB,GAAG,CAACc,WAAW,EAAZ,CAAT;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAYF,OAAO,CAACG,KAApB;AACA,UAAM;AAACC,MAAAA;AAAD,QAAYJ,OAAlB,CAHE,CAIF;AACA;AACA;AACA;AACA;;AACA,UAAMpB,KAAK,CAAC,IAAD,CAAX;AACA,UAAME,GAAG,CAACa,WAAW,EAAZ,CAAT;AACD,GAXD,CAWE,OAAOU,CAAP,EAAU;AACVJ,IAAAA,OAAO,CAACC,GAAR,CAAYG,CAAZ;AACA,UAAMvB,GAAG,CAACO,gBAAgB,CAACgB,CAAD,CAAjB,CAAT;AACD;AACJ;;AAED,UAAUC,WAAV,CAAsB;AAAEN,EAAAA;AAAF,CAAtB,EAAmC;AACjC,QAAMpB,KAAK,CAAC,GAAD,CAAX;AACA,QAAM;AAACwB,IAAAA;AAAD,MAAaJ,OAAO,CAACO,IAA3B;AACAN,EAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AACA,QAAMlB,GAAG,CAACY,UAAU,CAAC;AACnBc,IAAAA,CAAC,EAAEJ;AADgB,GAAD,CAAX,CAAT,CAJiC,CAOjC;AACA;AACD;;AAED,UAAUK,OAAV,CAAkB;AAAET,EAAAA;AAAF,CAAlB,EAA+B;AAC7B,MAAI;AACF,UAAMlB,GAAG,CAACc,WAAW,EAAZ,CAAT;AACA,UAAM;AAAEc,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAyBX,OAAO,CAACO,IAAvC;AACA,UAAMK,GAAG,GAAG,MAAMjC,IAAI,CAACS,OAAD,EAAU;AAC9BsB,MAAAA,KAD8B;AAE9BC,MAAAA,WAF8B;AAG9BE,MAAAA,MAAM,EAAEf,MAAM,CAAC,CAAD,CAAN,CAAUgB;AAHY,KAAV,CAAtB;AAKA,UAAMhC,GAAG,CAACU,eAAe,CAACoB,GAAG,CAACL,IAAL,CAAhB,CAAT;AACA,UAAMzB,GAAG,CAACe,SAAS,EAAV,CAAT;AACA,UAAMjB,KAAK,CAAC,IAAD,CAAX;AACA,UAAME,GAAG,CAACa,WAAW,EAAZ,CAAT;AAED,GAbD,CAaE,OAAOoB,KAAP,EAAc;AACdd,IAAAA,OAAO,CAACC,GAAR,CAAYa,KAAZ;AACA,UAAMjC,GAAG,CAACW,cAAc,CAACsB,KAAD,CAAf,CAAT;AACD;AACF;;AAED,UAAUC,QAAV,GAAqB;AACnB,QAAM/B,UAAU,CAACC,QAAQ,CAAC+B,UAAV,EAAqBlB,eAArB,CAAhB,CADmB,CAEnB;AACA;AACD;;AAED,eAAeiB,QAAf","sourcesContent":["import {\n  call,\n  delay,\n  fork,\n  put,\n  select,\n  take,\n  takeLatest,\n} from \"redux-saga/effects\";\nimport * as taskType from \"../constants/tasks\";\nimport { getListTask, addTaks } from \"../apis/tasks\";\nimport {\n  fetchTasksFailed,\n  fetchTasksSuccess,\n  fetchFilterSuccess,\n  addTasksSuccess,\n  addTasksFailed,\n  fetchTasks\n} from \"../actions/tasks\";\nimport { hideLoading, showLoading } from \"../actions/ui\";\nimport { hideModal } from \"../actions/modalGlobal\";\n\nimport { STATUS } from \"../constants/index\";\n\nfunction* watchFetchTasks({ payload }) {\n    try {\n      yield put(showLoading());\n      console.log(payload.param);\n      const {keyword} = payload;\n      // const res = yield call(getListTask({\n      //   g : keyword\n      // }));\n      // const { data } = res;\n      // yield put(fetchTasksSuccess(data));\n      yield delay(1000);\n      yield put(hideLoading());\n    } catch (e) {\n      console.log(e);\n      yield put(fetchTasksFailed(e));\n    }\n}\n\nfunction* fetchFilter({ payload }) {\n  yield delay(500);\n  const {keyword} =  payload.data;\n  console.log(payload);\n  yield put(fetchTasks({\n    g: keyword\n  }))\n  //const action = yield put()\n  //yield put(fetchFilterSuccess(listTaskFiltered));\n}\n\nfunction* addTask({ payload }) {\n  try {\n    yield put(showLoading());\n    const { title, description } = payload.data;\n    const res = yield call(addTaks, {\n      title,\n      description,\n      status: STATUS[0].value,\n    });\n    yield put(addTasksSuccess(res.data));\n    yield put(hideModal());\n    yield delay(1000);\n    yield put(hideLoading());\n\n  } catch (error) {\n    console.log(error);\n    yield put(addTasksFailed(error));\n  }\n}\n\nfunction* rootSaga() {\n  yield takeLatest(taskType.FETCH_TASK,watchFetchTasks);\n  //yield takeLatest(taskType.FETCH_FILTER, fetchFilter);\n  //yield takeLatest(taskType.ADD_TASK, addTask);\n}\n\nexport default rootSaga;\n"]},"metadata":{},"sourceType":"module"}
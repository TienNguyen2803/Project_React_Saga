{"ast":null,"code":"import { call, delay, fork, put, select, take, takeLatest } from \"redux-saga/effects\";\nimport * as taskType from \"../constants/tasks\";\nimport { fectchTasks } from \"../apis/tasks\";\nimport { fetchTasksFailed, fetchTasksSuccess, fetchFilterSuccess } from \"../actions/tasks\";\nimport { hideLoading, showLoading } from '../actions/ui';\n\nfunction* watchFetchTasks() {\n  while (true) {\n    try {\n      yield take(taskType.FETCH_TASK);\n      yield put(showLoading());\n      const res = yield call(fectchTasks);\n      const {\n        data\n      } = res;\n      yield put(fetchTasksSuccess(data));\n      yield delay(1000);\n      yield put(hideLoading());\n    } catch (e) {\n      console.log(e);\n      yield put(fetchTasksFailed(e));\n    }\n  }\n}\n\nfunction* fetchFilter({\n  payload\n}) {\n  yield delay(500);\n  const {\n    keyword\n  } = payload;\n  const list = yield select(state => state.tasks.listTasks);\n  const listTaskFiltered = list.filter(task => task.title.trim().toLowerCase().includes(keyword.trim().toLowerCase()));\n  console.log(listTaskFiltered); //yield put(fetchFilterSuccess(listTaskFiltered));\n}\n\nfunction* rootSaga() {\n  yield fork(watchFetchTasks);\n  yield takeLatest(taskType.FETCH_FILTER, fetchFilter);\n}\n\nexport default rootSaga;","map":{"version":3,"sources":["/Users/minhtien/Documents/react/project-saga/src/saga/index.js"],"names":["call","delay","fork","put","select","take","takeLatest","taskType","fectchTasks","fetchTasksFailed","fetchTasksSuccess","fetchFilterSuccess","hideLoading","showLoading","watchFetchTasks","FETCH_TASK","res","data","e","console","log","fetchFilter","payload","keyword","list","state","tasks","listTasks","listTaskFiltered","filter","task","title","trim","toLowerCase","includes","rootSaga","FETCH_FILTER"],"mappings":"AAAA,SAASA,IAAT,EAAeC,KAAf,EAAsBC,IAAtB,EAA4BC,GAA5B,EAAiCC,MAAjC,EAAyCC,IAAzC,EAA+CC,UAA/C,QAAiE,oBAAjE;AACA,OAAO,KAAKC,QAAZ,MAA0B,oBAA1B;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,SAASC,gBAAT,EAA2BC,iBAA3B,EAA8CC,kBAA9C,QAAuE,kBAAvE;AACA,SAAQC,WAAR,EAAqBC,WAArB,QAAuC,eAAvC;;AAEA,UAAUC,eAAV,GAA4B;AAC1B,SAAO,IAAP,EAAa;AACX,QAAI;AACF,YAAMT,IAAI,CAACE,QAAQ,CAACQ,UAAV,CAAV;AACA,YAAMZ,GAAG,CAACU,WAAW,EAAZ,CAAT;AACA,YAAMG,GAAG,GAAG,MAAMhB,IAAI,CAACQ,WAAD,CAAtB;AACA,YAAM;AAAES,QAAAA;AAAF,UAAWD,GAAjB;AACA,YAAMb,GAAG,CAACO,iBAAiB,CAACO,IAAD,CAAlB,CAAT;AACA,YAAMhB,KAAK,CAAC,IAAD,CAAX;AACA,YAAME,GAAG,CAACS,WAAW,EAAZ,CAAT;AACD,KARD,CAQE,OAAOM,CAAP,EAAU;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACA,YAAMf,GAAG,CAACM,gBAAgB,CAACS,CAAD,CAAjB,CAAT;AACD;AACF;AACF;;AAED,UAAUG,WAAV,CAAsB;AAACC,EAAAA;AAAD,CAAtB,EAAgC;AAC9B,QAAMrB,KAAK,CAAC,GAAD,CAAX;AACA,QAAM;AAACsB,IAAAA;AAAD,MAAYD,OAAlB;AACA,QAAME,IAAI,GAAG,MAAMpB,MAAM,CAACqB,KAAK,IAAKA,KAAK,CAACC,KAAN,CAAYC,SAAvB,CAAzB;AACA,QAAMC,gBAAgB,GAAGJ,IAAI,CAACK,MAAL,CAAYC,IAAI,IACvCA,IAAI,CAACC,KAAL,CAAWC,IAAX,GAAkBC,WAAlB,GAAgCC,QAAhC,CAAyCX,OAAO,CAACS,IAAR,GAAeC,WAAf,EAAzC,CADuB,CAAzB;AAGAd,EAAAA,OAAO,CAACC,GAAR,CAAYQ,gBAAZ,EAP8B,CAQ9B;AACD;;AAED,UAAUO,QAAV,GAAqB;AACnB,QAAMjC,IAAI,CAACY,eAAD,CAAV;AACA,QAAMR,UAAU,CAACC,QAAQ,CAAC6B,YAAV,EAAuBf,WAAvB,CAAhB;AACD;;AAED,eAAec,QAAf","sourcesContent":["import { call, delay, fork, put, select, take, takeLatest } from \"redux-saga/effects\";\nimport * as taskType from \"../constants/tasks\";\nimport { fectchTasks } from \"../apis/tasks\";\nimport { fetchTasksFailed, fetchTasksSuccess ,fetchFilterSuccess} from \"../actions/tasks\";\nimport {hideLoading, showLoading} from '../actions/ui';\n\nfunction* watchFetchTasks() {\n  while (true) {\n    try {\n      yield take(taskType.FETCH_TASK);\n      yield put(showLoading());\n      const res = yield call(fectchTasks);\n      const { data } = res;\n      yield put(fetchTasksSuccess(data));\n      yield delay(1000)\n      yield put(hideLoading())\n    } catch (e) {\n      console.log(e);\n      yield put(fetchTasksFailed(e));\n    }\n  }\n}\n\nfunction* fetchFilter({payload}){\n  yield delay(500);\n  const {keyword} = payload;\n  const list = yield select(state =>  state.tasks.listTasks)\n  const listTaskFiltered = list.filter(task =>\n    task.title.trim().toLowerCase().includes(keyword.trim().toLowerCase())\n  )\n  console.log(listTaskFiltered);\n  //yield put(fetchFilterSuccess(listTaskFiltered));\n}\n\nfunction* rootSaga() {\n  yield fork(watchFetchTasks);\n  yield takeLatest(taskType.FETCH_FILTER,fetchFilter)\n}\n\nexport default rootSaga;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { call, delay, put, select, takeLatest } from \"redux-saga/effects\";\nimport * as taskType from \"../constants/tasks\";\nimport { getListTask, addTaks, update } from \"../apis/tasks\";\nimport { fetchTasksFailed, fetchTasksSuccess, addTasksSuccess, addTasksFailed, fetchTasks, updateTask } from \"../actions/tasks\";\nimport { hideLoading, showLoading } from \"../actions/ui\";\nimport { hideModal } from \"../actions/modalGlobal\";\nimport { STATUS } from \"../constants/index\";\n\nfunction* watchFetchTasks({\n  payload\n}) {\n  try {\n    yield put(showLoading());\n    const {\n      param\n    } = payload;\n    const res = yield call(getListTask, param);\n    const {\n      data\n    } = res;\n    yield put(fetchTasksSuccess(data));\n    yield delay(1000);\n    yield put(hideLoading());\n  } catch (e) {\n    yield put(fetchTasksFailed(e));\n  }\n}\n\nfunction* fetchFilter({\n  payload\n}) {\n  yield delay(500);\n  const {\n    keyword\n  } = payload;\n  yield put(fetchTasks({\n    q: keyword\n  })); //const action = yield put()\n  //yield put(fetchFilterSuccess(listTaskFiltered));\n}\n\nfunction* addTask({\n  payload\n}) {\n  try {\n    yield put(showLoading());\n    const {\n      title,\n      description\n    } = payload.data;\n    const res = yield call(addTaks, {\n      title,\n      description,\n      status: STATUS[0].value\n    });\n    yield put(addTasksSuccess(res.data));\n    yield put(hideModal());\n    yield delay(1000);\n    yield put(hideLoading());\n  } catch (error) {\n    console.log(error);\n    yield put(addTasksFailed(error));\n  }\n}\n\nfunction* updateTasks({\n  payload\n}) {\n  try {\n    const {\n      task\n    } = payload;\n    yield call(update, task, task.id);\n    yield put(showLoading()); //yield put(updateTask, task);\n\n    yield put(hideModal());\n    yield delay(1000);\n    yield put(hideLoading());\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nfunction* rootSaga() {\n  yield takeLatest(taskType.FETCH_TASK, watchFetchTasks);\n  yield takeLatest(taskType.FETCH_FILTER, fetchFilter);\n  yield takeLatest(taskType.ADD_TASK, addTask);\n  yield takeLatest(taskType.UPDATE_TASK, updateTasks);\n}\n\nexport default rootSaga;","map":{"version":3,"sources":["/Users/minhtien/Documents/react/project-saga/src/saga/index.js"],"names":["call","delay","put","select","takeLatest","taskType","getListTask","addTaks","update","fetchTasksFailed","fetchTasksSuccess","addTasksSuccess","addTasksFailed","fetchTasks","updateTask","hideLoading","showLoading","hideModal","STATUS","watchFetchTasks","payload","param","res","data","e","fetchFilter","keyword","q","addTask","title","description","status","value","error","console","log","updateTasks","task","id","rootSaga","FETCH_TASK","FETCH_FILTER","ADD_TASK","UPDATE_TASK"],"mappings":"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","sourcesContent":["import { call, delay, put, select, takeLatest } from \"redux-saga/effects\";\nimport * as taskType from \"../constants/tasks\";\nimport { getListTask, addTaks, update } from \"../apis/tasks\";\nimport {\n  fetchTasksFailed,\n  fetchTasksSuccess,\n  addTasksSuccess,\n  addTasksFailed,\n  fetchTasks,\n  updateTask ,\n} from \"../actions/tasks\";\nimport { hideLoading, showLoading } from \"../actions/ui\";\nimport { hideModal } from \"../actions/modalGlobal\";\n\nimport { STATUS } from \"../constants/index\";\n\nfunction* watchFetchTasks({ payload }) {\n  try {\n    yield put(showLoading());\n    const { param } = payload;\n    const res = yield call(getListTask, param);\n    const { data } = res;\n    yield put(fetchTasksSuccess(data));\n    yield delay(1000);\n    yield put(hideLoading());\n  } catch (e) {\n    yield put(fetchTasksFailed(e));\n  }\n}\n\nfunction* fetchFilter({ payload }) {\n  yield delay(500);\n  const { keyword } = payload;\n  yield put(\n    fetchTasks({\n      q: keyword,\n    })\n  );\n  //const action = yield put()\n  //yield put(fetchFilterSuccess(listTaskFiltered));\n}\n\nfunction* addTask({ payload }) {\n  try {\n    yield put(showLoading());\n    const { title, description } = payload.data;\n    const res = yield call(addTaks, {\n      title,\n      description,\n      status: STATUS[0].value,\n    });\n    yield put(addTasksSuccess(res.data));\n    yield put(hideModal());\n    yield delay(1000);\n    yield put(hideLoading());\n  } catch (error) {\n    console.log(error);\n    yield put(addTasksFailed(error));\n  }\n}\n\nfunction* updateTasks({ payload }) {\n  try {\n    const { task } = payload;\n    yield call(update, task, task.id);\n    yield put(showLoading());\n    //yield put(updateTask, task);\n    yield put(hideModal());\n    yield delay(1000);\n    yield put(hideLoading());\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nfunction* rootSaga() {\n  yield takeLatest(taskType.FETCH_TASK, watchFetchTasks);\n  yield takeLatest(taskType.FETCH_FILTER, fetchFilter);\n  yield takeLatest(taskType.ADD_TASK, addTask);\n  yield takeLatest(taskType.UPDATE_TASK, updateTasks);\n}\n\nexport default rootSaga;\n"]},"metadata":{},"sourceType":"module"}
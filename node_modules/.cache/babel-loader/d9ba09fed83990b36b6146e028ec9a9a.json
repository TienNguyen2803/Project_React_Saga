{"ast":null,"code":"import { call, delay, fork, put, select, take, takeLatest } from \"redux-saga/effects\";\nimport * as taskType from \"../constants/tasks\";\nimport { fectchTasks } from \"../apis/tasks\";\nimport { fetchTasksFailed, fetchTasksSuccess } from \"../actions/tasks\";\nimport { hideLoading, showLoading } from '../actions/ui';\n\nfunction* watchFetchTasks() {\n  while (true) {\n    try {\n      yield take(taskType.FETCH_TASK);\n      yield put(showLoading());\n      const res = yield call(fectchTasks);\n      const {\n        data\n      } = res;\n      yield put(fetchTasksSuccess(data));\n      yield delay(1000);\n      yield put(hideLoading());\n    } catch (e) {\n      console.log(e);\n      yield put(fetchTasksFailed(e));\n    }\n  }\n}\n\nfunction* fetchFilter({\n  payload\n}) {\n  yield delay(500);\n  const {\n    keyword\n  } = payload;\n  const listTask = yield select(state => state.tasks.listTasks);\n  const listTaskFiltered = listTask.filter(task => task.title.trim().toLowerCase().include(keyword.trim().toLowerCase()));\n  console.log(listTaskFiltered);\n}\n\nfunction* rootSaga() {\n  yield fork(watchFetchTasks);\n  yield takeLatest(taskType.FETCH_FILTER, fetchFilter);\n}\n\nexport default rootSaga;","map":{"version":3,"sources":["/Users/minhtien/Documents/react/project-saga/src/saga/index.js"],"names":["call","delay","fork","put","select","take","takeLatest","taskType","fectchTasks","fetchTasksFailed","fetchTasksSuccess","hideLoading","showLoading","watchFetchTasks","FETCH_TASK","res","data","e","console","log","fetchFilter","payload","keyword","listTask","state","tasks","listTasks","listTaskFiltered","filter","task","title","trim","toLowerCase","include","rootSaga","FETCH_FILTER"],"mappings":"AAAA,SAASA,IAAT,EAAeC,KAAf,EAAsBC,IAAtB,EAA4BC,GAA5B,EAAiCC,MAAjC,EAAyCC,IAAzC,EAA+CC,UAA/C,QAAiE,oBAAjE;AACA,OAAO,KAAKC,QAAZ,MAA0B,oBAA1B;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,SAASC,gBAAT,EAA2BC,iBAA3B,QAAoD,kBAApD;AACA,SAAQC,WAAR,EAAqBC,WAArB,QAAuC,eAAvC;;AAEA,UAAUC,eAAV,GAA4B;AAC1B,SAAO,IAAP,EAAa;AACX,QAAI;AACF,YAAMR,IAAI,CAACE,QAAQ,CAACO,UAAV,CAAV;AACA,YAAMX,GAAG,CAACS,WAAW,EAAZ,CAAT;AACA,YAAMG,GAAG,GAAG,MAAMf,IAAI,CAACQ,WAAD,CAAtB;AACA,YAAM;AAAEQ,QAAAA;AAAF,UAAWD,GAAjB;AACA,YAAMZ,GAAG,CAACO,iBAAiB,CAACM,IAAD,CAAlB,CAAT;AACA,YAAMf,KAAK,CAAC,IAAD,CAAX;AACA,YAAME,GAAG,CAACQ,WAAW,EAAZ,CAAT;AACD,KARD,CAQE,OAAOM,CAAP,EAAU;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACA,YAAMd,GAAG,CAACM,gBAAgB,CAACQ,CAAD,CAAjB,CAAT;AACD;AACF;AACF;;AAED,UAAUG,WAAV,CAAsB;AAACC,EAAAA;AAAD,CAAtB,EAAgC;AAC9B,QAAMpB,KAAK,CAAC,GAAD,CAAX;AACA,QAAM;AAACqB,IAAAA;AAAD,MAAYD,OAAlB;AACA,QAAME,QAAQ,GAAG,MAAMnB,MAAM,CAACoB,KAAK,IAAKA,KAAK,CAACC,KAAN,CAAYC,SAAvB,CAA7B;AACA,QAAMC,gBAAgB,GAAGJ,QAAQ,CAACK,MAAT,CAAgBC,IAAI,IAC3CA,IAAI,CAACC,KAAL,CAAWC,IAAX,GAAkBC,WAAlB,GAAgCC,OAAhC,CAAwCX,OAAO,CAACS,IAAR,GAAeC,WAAf,EAAxC,CADuB,CAAzB;AAGAd,EAAAA,OAAO,CAACC,GAAR,CAAYQ,gBAAZ;AACD;;AAED,UAAUO,QAAV,GAAqB;AACnB,QAAMhC,IAAI,CAACW,eAAD,CAAV;AACA,QAAMP,UAAU,CAACC,QAAQ,CAAC4B,YAAV,EAAuBf,WAAvB,CAAhB;AACD;;AAED,eAAec,QAAf","sourcesContent":["import { call, delay, fork, put, select, take, takeLatest } from \"redux-saga/effects\";\nimport * as taskType from \"../constants/tasks\";\nimport { fectchTasks } from \"../apis/tasks\";\nimport { fetchTasksFailed, fetchTasksSuccess } from \"../actions/tasks\";\nimport {hideLoading, showLoading} from '../actions/ui';\n\nfunction* watchFetchTasks() {\n  while (true) {\n    try {\n      yield take(taskType.FETCH_TASK);\n      yield put(showLoading());\n      const res = yield call(fectchTasks);\n      const { data } = res;\n      yield put(fetchTasksSuccess(data));\n      yield delay(1000)\n      yield put(hideLoading())\n    } catch (e) {\n      console.log(e);\n      yield put(fetchTasksFailed(e));\n    }\n  }\n}\n\nfunction* fetchFilter({payload}){\n  yield delay(500);\n  const {keyword} = payload;\n  const listTask = yield select(state =>  state.tasks.listTasks)\n  const listTaskFiltered = listTask.filter(task=>\n    task.title.trim().toLowerCase().include(keyword.trim().toLowerCase())\n  )\n  console.log(listTaskFiltered);\n}\n\nfunction* rootSaga() {\n  yield fork(watchFetchTasks);\n  yield takeLatest(taskType.FETCH_FILTER,fetchFilter)\n}\n\nexport default rootSaga;\n"]},"metadata":{},"sourceType":"module"}